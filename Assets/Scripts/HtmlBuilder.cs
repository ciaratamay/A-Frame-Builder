using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Unity.VisualScripting;
using UnityEditor;
using UnityEngine;

[ExecuteInEditMode]
public class HtmlBuilder : MonoBehaviour
{
    public bool GenerateHTML;
    //UpdateSkybox;
    public string [] htmltags = { "<!DOCTYPE html><html><head><title>Title</title>", "</head><body>", "</body></html>" };
    public string [] libraries = { "https://aframe.io/releases/1.5.0/aframe.min.js" };
    public string libprefix = "<script src="; public string libsuffix = "></script>";
    public string punct;
    public static string _punct;

    public string imgExtension;
    public static string _imgExtension;

    //  private AFrameObject skyObj = null;


    void Update()
    {
        ///quick and dirty way to update in edit mode. ** To do: add editor window buttons instead so no more update loop. ** 
        if (GenerateHTML)
        {
            _punct = punct; //copy these to static strings for use in other scripts. 
            _imgExtension = imgExtension; // to do : figure out automatially adding the image extension. or make it be png only?


            GenHTML(); // run main function to get html. 
            GenerateHTML = false; //turn off to stop this function running again and allow user to check box again.
        }



    }

    void GenHTML()
    {
        string tempLibs = ""; //for libraries: allows user to add any libraries they want in the inspector. by default just has a-frame.
        foreach (string s in libraries)
        {
            tempLibs += libprefix + s + libsuffix;
        }

        string allText = htmltags [0] + tempLibs + htmltags [1] + htmltags [2] + GenerateScene() + htmltags [3] + htmltags [4]; // creates a long string of html with the html and body tags wrapped around the objects generated by generate scene.
                                                                                                                                // //to do: make this nicer. 
        Debug.Log(allText); //this is where you will see the html. copy and paste it into ide that supports js libraries in live preview to preview.  to do: generate a text file not a debug line.
    }

    public string GenerateScene()
    {

        AFrameObject [] objects = GameObject.FindObjectsOfType<AFrameObject>(); //to do : replace this, unneccessary, have the scene set up automatically. 

        List<string> objectsHTML = new List<string>(); // make a list of the objects
        objectsHTML.Add("<a-sky src=" + punct + GetSky() + imgExtension + punct + "></a-sky>");//                                               //  objectsHTML.Add(rootObject.opentag);
        foreach (AFrameObject obj in objects)
        {

            objectsHTML.Add(obj.GetProperties()); //get the open tag + innerhtml for each object.

        }

        string collated = "";
        foreach (string h in objectsHTML)
        {
            collated += h; // add the html to the long string
        }

        return collated; //return the full list as one big string. 
    }

    string GetSky()
    {
        string skyboxName = RenderSettings.skybox.name;

        Debug.Log("skybox name" + skyboxName);
        return skyboxName;
    }


}
